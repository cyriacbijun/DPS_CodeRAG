# -*- coding: utf-8 -*-
"""CodeRag_Feed_FAISS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urxZ9JwRYxz0gKMEKh1H6jUFGW7_hexe
"""

#pip install faiss-cpu sentence-transformers


import csv
import json
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

def preprocess_text(text):
    """Preprocess text by stripping whitespace and normalizing line endings."""
    text = text.strip()
    text = text.replace('\r\n', '\n').replace('\r', '\n')
    return text

csv_file_path = "/content/sample_data/intial.csv" # FIX THE PATH LATER

global_list = []
with open(csv_file_path, mode='r', encoding='utf-8') as csvfile:
  csv_reader = csv.reader(csvfile)
  i = 0
  for row in csv_reader:
    if len(row) < 2:
     print(f"Skipping malformed row: {row}")
     continue

    # Preprocess the code snippet and description
    code_snippet = preprocess_text(row[0])
    global_list.append(code_snippet)



# Initialize the Sentence Transformer model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Convert Python functions to vector embeddings
embeddings = model.encode(global_list)

# Convert the embeddings to a numpy array of float32 (required by FAISS)
embedding_matrix = np.array(embeddings).astype('float32')

# Create the FAISS index (using a flat index for simplicity)
index = faiss.IndexFlatL2(embedding_matrix.shape[1])

# Add the embeddings to the FAISS index
index.add(embedding_matrix)

# Save the index
faiss.write_index(index, "python_functions_index.faiss")
